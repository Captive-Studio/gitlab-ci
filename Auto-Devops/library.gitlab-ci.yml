# Common mixins and anchors
#
# Guidelines
#
# ✓ All jobs should starts with `.`
# ✓ Anchor should not be used (not preserved between files)
# ✓ Including this file should not change pipeline behavior

# Only used for anchors
# ⚠️ Must be declared before use
.auto-devops_rules:
  rules:
    - &skip_if_canary_enabled
      if: $CANARY_ENABLED != null && $CANARY_ENABLED != '' && $CANARY_ENABLED != 'false'
      when: never
    - &skip_if_incremental_rollout_enabled
      if: '$INCREMENTAL_ROLLOUT_ENABLED || $INCREMENTAL_ROLLOUT_MODE'
      when: never
    - &only_staging_enabled
      if: $STAGING_ENABLED != null && $STAGING_ENABLED != '' && $STAGING_ENABLED != 'false'
    - &only_canary_enabled
      if: $CANARY_ENABLED != null && $CANARY_ENABLED != '' && $CANARY_ENABLED != 'false'

# Retry twice when a restricted set of error occurs
#
# @example
# my_step:
#   extends
#     - .autodevops_retry
#   stage: ...
#
.autodevops_retry:
  retry:
    max: 2 # This is confusing but this means "3 runs at max".
    when:
      - api_failure
      - data_integrity_failure
      - runner_system_failure
      - scheduler_failure
      - stuck_or_timeout_failure
      - unknown_failure

# Docker in Docker mixin
#
# @example
# my_step:
#   extends
#     - .docker_dind
#   stage: ...
#
.docker_dind:
  image: docker:24-git@sha256:7ec1baa754541c69feb978440705649e32a5d249a6b4c0fb173641054eb5ec96
  services:
    - name: docker:24-dind@sha256:b42e6e3883fc20a6a98eda330b6a2b0a5efb3ca4c121bf7be154447904d199e8
      entrypoint: [sh, -c, dockerd-entrypoint.sh $DOCKER_DAEMON_OPTIONS]
  variables:
    DOCKER_DAEMON_OPTIONS: '--registry-mirror=${CI_REGISTRY_MIRROR} --tls=false'
  tags:
    - docker-dind
  before_script:
    - !reference [.autodevops:script:before, script]
    - !reference [.autodevops:script:ci-registry-login, script]

# Docker make image mixin.
#
# @example
# my_step:
#   extends
#     - .docker_make_image
#   stage: ...
#
.docker_maker_image:
  image: registry.git.captive.fr/captive/systeme/docker-maker:20.10.22-0@sha256:2db4870ef95c7905ad791527104be160f8dbc009b6c24c07912c77a5df6b81fa

# Use controle-qualite image and a lightweight machine
# By default use `prepare` step to fail early and fast
#
# @example
# my_step:
#   extends
#     - .code_quality
#   stage: ...
#
.code_quality:
  image: registry.git.captive.fr/captive/systeme/docker/controle-qualite:latest@sha256:26688a41f87ae41d94b5fcd93b4c0226807a7cc67933664c7bf5b110291090b9
  stage: prepare
  tags:
    - lightweight-job

# Mixin to trigger at staging step only when `$REVIEW_ENABLED` is truthy
#
# @example
#
# variables:
#   REVIEW_ENABLED: 'true'
#
# my_step:
#   extends
#     - .auto-devops_review
#   variables:
#     IF_AUTO_DEVOPS_PLATFORM_TARGET: 'AZURE' # Ex: will trigger only if AUTO_DEVOPS_PLATFORM_TARGET == 'AZURE'
#   script:
#     # TODO !
#
.auto-devops_review:
  stage: review
  when: manual
  variables:
    # Optional: define if needed to filter
    IF_AUTO_DEVOPS_PLATFORM_TARGET: null
  environment:
    name: review/$CI_COMMIT_REF_SLUG
  rules:
    - !reference [.auto-devops:rules:filter_platform_target, rules]
    - !reference [.auto-devops:rules:skip_kubernetes, rules]
    - !reference [.auto-devops:rules:skip_default_branch, rules]
    - !reference [.auto-devops:rules:skip_if_review_disabled, rules]
    - when: on_success

.auto-devops_stop_review:
  stage: cleanup
  variables:
    GIT_STRATEGY: none
  # script:
  environment:
    name: review/$CI_COMMIT_REF_SLUG
    action: stop
  allow_failure: true
  rules:
    - !reference [.auto-devops:rules:filter_platform_target, rules]
    - !reference [.auto-devops:rules:skip_kubernetes, rules]
    - !reference [.auto-devops:rules:skip_default_branch, rules]
    - !reference [.auto-devops:rules:skip_if_review_disabled, rules]
    - when: manual

# Mixin to trigger review on staging environment
#
# @example
#
# variables:
#   REVIEW_ENABLED: 'true'
#
# my_step:
#   extends
#     - .auto-devops_review_staging
#   variables:
#     IF_AUTO_DEVOPS_PLATFORM_TARGET: 'AZURE' # Ex: will trigger only if AUTO_DEVOPS_PLATFORM_TARGET == 'AZURE'
#   script:
#     # TODO !
#
.auto-devops_review_staging:
  extends:
    - .auto-devops_review
    - .auto-devops_staging
  stage: review
  rules:
    - !reference [.auto-devops:rules:filter_platform_target, rules]
    - !reference [.auto-devops:rules:skip_kubernetes, rules]
    - !reference [.auto-devops:rules:skip_default_branch, rules]
    - !reference [.auto-devops:rules:skip_if_staging_disabled, rules]
    - when: manual
  allow_failure: true

# Mixin to trigger at staging step only when `$STAGING_ENABLED` is truthy
#
# @example
#
# variables:
#   STAGING_ENABLED: 'true'
#
# my_step:
#   extends
#     - .auto-devops_staging
#   variables:
#     IF_AUTO_DEVOPS_PLATFORM_TARGET: 'AZURE' # Ex: will trigger only if AUTO_DEVOPS_PLATFORM_TARGET == 'AZURE'
#   script:
#     # TODO !
#
.auto-devops_staging:
  stage: staging
  variables:
    # Optional: define if needed to filter
    IF_AUTO_DEVOPS_PLATFORM_TARGET: null
  environment:
    name: staging
    url: http://staging.$APP_NAME.$APP_DOMAIN
  rules:
    - !reference [.auto-devops:rules:filter_platform_target, rules]
    - !reference [.auto-devops:rules:skip_kubernetes, rules]
    - !reference [.auto-devops:rules:skip_non_default_branch, rules]
    - !reference [.auto-devops:rules:skip_if_staging_disabled, rules]
    - when: on_success

# Common mixin for production environment
#
# @example
# .auto-devops_production:
#   ...override any parameter
.auto-devops_production:
  stage: production
  variables:
    # Optional: define if needed to filter
    IF_AUTO_DEVOPS_PLATFORM_TARGET: null
  environment:
    name: production
    url: http://prod.$APP_NAME.$APP_DOMAIN

.auto-devops_production_auto:
  extends:
    - .auto-devops_production
  rules:
    - !reference [.auto-devops:rules:skip_deploy_freeze, rules]
    - !reference [.auto-devops:rules:filter_platform_target, rules]
    - !reference [.auto-devops:rules:skip_kubernetes, rules]
    - !reference [.auto-devops:rules:skip_non_default_branch, rules]
    - !reference [.auto-devops:rules:skip_if_staging_enabled, rules]
    - <<: *skip_if_canary_enabled
    # - <<: *skip_if_incremental_rollout_enabled
    # Default
    - when: on_success

.auto-devops_production_manual:
  extends:
    - .auto-devops_production
  rules:
    - !reference [.auto-devops:rules:skip_deploy_freeze, rules]
    - !reference [.auto-devops:rules:filter_platform_target, rules]
    - !reference [.auto-devops:rules:skip_kubernetes, rules]
    - !reference [.auto-devops:rules:skip_non_default_branch, rules]
    # - <<: *skip_if_incremental_rollout_enabled
    - <<: *only_staging_enabled
      when: manual
    - <<: *only_canary_enabled
      when: manual
# - if: '$CI_COMMIT_TAG =~ /^v([0-9]|[1-9][0-9]+)\.([0-9]|[1-9][0-9]+)\.([0-9]|[1-9][0-9]+)$/'

# Mixin to use CircleCI nodejs images
#
# @example
#
# my_step:
#   extends
#     - .nodejs_image
.nodejs_image:
  image: cimg/node:${NODEJS_VERSION}

# Mixin to use CircleCI nodejs images (+ Chrome)
#
# @example
#
# my_step:
#   extends
#     - .nodejs_image_browsers
.nodejs_image_browsers:
  image: cimg/node:${NODEJS_VERSION}-browsers

# Mixin to use CircleCI ruby images
#
# @example
#
# my_step:
#   extends
#     - .ruby_image
.ruby_image:
  image: cimg/ruby:${RUBY_VERSION}-node

# Mixin to use CircleCI ruby images (+ Chrome)
#
# @example
#
# my_step:
#   extends
#     - .ruby_image_browsers
.ruby_image_browsers:
  image: cimg/ruby:${RUBY_VERSION}-browsers

# Mixin to use Terraform
#
# @example
#
# my_step:
#   extends
#     - .terraform_image
.terraform_image:
  image:
    name: '$CI_TEMPLATE_REGISTRY_HOST/gitlab-org/terraform-images/releases/1.4:v1.0.0'
