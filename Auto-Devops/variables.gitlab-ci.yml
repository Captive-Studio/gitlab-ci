# Common pipelines variables
#
# Guidelines
#
# ‚úì Variables should be `UPPER_UNDERSCORE_CASE`
# ‚úì Toggle variables should always use `_ENABLED` (not `_DISABLED`)
# ‚úì Each Variables should be documented
variables:
  GIT_CLEAN_FLAGS: -ffdx -e .cache

  # Application name (for deployment, packages, etc)
  # By default $CI_PROJECT_NAME is used.
  #
  # @example
  # URL: https://git.captive.fr/captive/my-project
  # $CI_PROJECT_NAME // 'my-project'
  #
  # @type {string}
  APP_NAME: $CI_PROJECT_NAME

  # Default domain for deployment `env.app.$APP_DOMAIN`
  #
  # @type {string}
  APP_DOMAIN: captive.dev

  # Enable Build step
  #
  # @type {'true'|''}
  BUILD_ENABLED: 'true'

  # Enable Code quality (lint, rubocop, audit, etc)
  #
  # @type {'true'|''}
  CODE_QUALITY_ENABLED: 'true'

  # Enable Test step
  #
  # @type {'true'|''}
  TEST_ENABLED: 'true'

  # Enable Test system step
  #
  # @type {'true'|''}
  TEST_SYSTEM_ENABLED: 'true'

  # Enable Review step
  #
  # @type {'true'|''}
  REVIEW_ENABLED: ''

  # Deploy to staging step
  #
  # @type {'true'|''}
  STAGING_ENABLED: 'true'

  # Deploy canary release
  #
  # @type {'true'|''}
  CANARY_ENABLED: ''

  # Incremental rollout release (10%, 20%, etc)
  #
  # @type {'true'|''}
  INCREMENTAL_ROLLOUT_ENABLED: ''

  # Deployment Platform Target
  #
  # @type {''| 'HEROKU' | 'SCALINGO' | 'SCALEWAY' | 'MAKEFILE'}
  AUTO_DEVOPS_PLATFORM_TARGET: ''

  # Docker image registry URL, where image are pushed
  #
  # Can be overridden in Gitlab Projects and Groups
  #
  # @type {string}
  # CI_REGISTRY: registry.git.captive.fr

  # Docker image registry URL mirror (used by .docker-dind), to avoid limitation
  # By default we use google mirror (https://mirror.gcr.io) to ensure this configuration works in most environments
  #
  # Can be overridden in Gitlab Projects and Groups
  #
  # @type {string}
  CI_REGISTRY_MIRROR: https://mirror.gcr.io

  # Default slack webhook url
  #
  # @type {string}
  SLACK_WEBHOOK_URL: https://hooks.slack.com/services/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

  # Enable slack notification failure
  #
  # @type {'true'|''}
  SLACK_FAILURE_ENABLED: 'true'

  # The channel where a message will be posted in case of failure
  #
  # @type {string}
  SLACK_FAILURE_CHANNEL: '#ci-notification'

  # The message that will be sent in case of failure
  #
  # @type {string}
  SLACK_FAILURE_MESSAGE: >
    üí• [$CI_PROJECT_NAME] La pipeline <$CI_PIPELINE_URL|#$CI_PIPELINE_ID> a √©chou√©
      | Source : $CI_PIPELINE_SOURCE
      | Commit : $CI_COMMIT_SHA

  # @deprecated Legacy variables only used for custom Makefiles
  # TODO: use predefined CI_* variables in Makefiles instead
  CONTAINER_REGISTRY: $CI_REGISTRY
  REGISTRY_PROJECT_URL: $CI_REGISTRY_IMAGE
  BUILD_SUBPATH: dev
  BUILD_ID: $CI_COMMIT_SHORT_SHA
  REF_ID: $CI_COMMIT_REF_SLUG

  #
  # docker-dind
  #

  # @internal Use driver overlay2 for performances
  DOCKER_DRIVER: overlay2

  # @internal Disable TLS
  DOCKER_TLS_CERTDIR: ''

  # @internal
  DEPLOY_SSH_KNOWN_HOSTS_BASE64: ''

  #
  # Postgres
  #
  POSTGRES_DB: ci_test
  POSTGRES_USER: ci_db_user
  POSTGRES_PASSWORD: ci_db_password
  DATABASE_URL: 'postgresql://$POSTGRES_USER:$POSTGRES_PASSWORD@postgres:5432/$POSTGRES_DB'

  #
  # Redis
  #
  REDIS_URL: redis://redis:6379

  #
  # NodeJS
  #

  # NodeJS jobs are enabled by default if package.json is found
  NODEJS_ENABLED: 'true'
  # NodeJS version used (with `image: cimg/node-${NODEJS_VERSION}`)
  #
  # @see https://circleci.com/developer/images/image/cimg/node
  NODEJS_VERSION: 19.5.0

  # Relative NPM cache path
  CI_NPM_CACHE_PATH: .cache/npm
  # Relative NPM cache path
  CI_YARN_CACHE_PATH: .cache/yarn
  # Relative Bundle cache path
  CI_BUNDLE_CACHE_PATH: .cache/bundle
  # Relative Cypress cache path
  CI_CYPRESS_CACHE_PATH: .cache/cypress

  #
  # Ruby
  #

  # Ruby jobs are enabled by default if Gemfile is found
  RUBY_ENABLED: 'true'
  # NodeJS version used (with `image: cimg/ruby-${NODEJS_VERSION}`)
  #
  # @see https://circleci.com/developer/images/image/cimg/ruby
  RUBY_VERSION: 3.2.0

  #
  # Terraform
  #

  # Enable all terraform related jobs
  #
  # @type {'true'|''}
  TF_ENABLED: ''

  # Location of terraform scripts
  #
  # @type {string}
  TF_PROJECT_DIR: ${CI_PROJECT_DIR}/terraform

  # @type {'true'|''}
  TF_AUTO_DEPLOY: ''

  # Terraform State name (file that will be read)
  # By default, the name of the gitlab CI environnement
  #
  # @type {string}
  TF_STATE_NAME: ${CI_ENVIRONMENT_NAME}

  # Terraform root directory. By default should be put in a "terraform/environments/XXX" folder
  #
  # @type {string}
  TF_ROOT: ${TF_PROJECT_DIR}/environments/${TF_STATE_NAME}

  # @see https://blog.nimbleways.com/let-s-make-faster-gitlab-ci-cd-pipelines/
  # ‚ö†Ô∏è If enabled, this will cause cache restore errors
  # FATAL: remove [...]: directory not empty
  FF_USE_FASTZIP: 'false'
  ARTIFACT_COMPRESSION_LEVEL: fast
  CACHE_COMPRESSION_LEVEL: fast
