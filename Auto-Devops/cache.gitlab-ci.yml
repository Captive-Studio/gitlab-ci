# NodeJS

# Cache used to download packages (.yarn, etc)
.nodejs_download_cache:
  cache:
    key: ${CI_COMMIT_REF_SLUG}-nodejs-cache
    fallback_keys:
      - ${CI_DEFAULT_BRANCH}-nodejs-cache
    # must be inside $CI_PROJECT_DIR for gitlab-runner caching (#3)
    paths:
      - ${CI_NPM_CACHE_PATH}
      - ${CI_YARN_CACHE_PATH}
    when: on_success
    policy: pull-push

# Cache used to install dependencies (node_modules) in read mode
.nodejs_cache:
  cache: &nodejs_cache
    key: ${CI_COMMIT_REF_SLUG}-nodejs-install
    fallback_keys:
      - ${CI_DEFAULT_BRANCH}-nodejs-install
    paths:
      - ${CI_CYPRESS_CACHE_PATH}
      - '**/node_modules/'
    policy: pull

# Cache used to install dependencies (node_modules) in write mode
.nodejs_cache_push:
  cache:
    <<: *nodejs_cache
    policy: push

# Ruby

# Cache used to download packages ($BUNDLE_CACHE_PATH)
.ruby_download_cache:
  cache:
    key: ${CI_COMMIT_REF_SLUG}-ruby-cache
    fallback_keys:
      - ${CI_DEFAULT_BRANCH}-ruby-cache
    paths:
      - ${CI_BUNDLE_CACHE_PATH}
    when: on_success
    policy: pull-push

# Cache used to download packages ($BUNDLE_PATH) in read mode
.ruby_cache:
  cache: &ruby_cache
    key:
      files:
        - Gemfile.lock
    paths:
      - ${BUNDLE_PATH}
    policy: pull

# Cache used to download packages ($BUNDLE_PATH) in write mode
.ruby_cache_push:
  cache:
    <<: *ruby_cache
    # Workaround because ruby_download_cache does not work
    # policy: push
    policy: pull-push

.install_cache:
  cache:
    - !reference [.ruby_cache, cache]
    - !reference [.nodejs_cache, cache]
