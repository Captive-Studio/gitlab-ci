# @see https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Terraform/Base.gitlab-ci.yml
# @see https://docs.gitlab.com/ee/user/infrastructure/iac/terraform_template_recipes.html

# include:
# Add security scan
# - template: Jobs/SAST-IaC.gitlab-ci.yml
# rules:
#   - if: $TF_ENABLED != null && $TF_ENABLED != '' & $TF_ENABLED != 'false'

.auto-devops:rules:skip_if_terraform_disabled:
  rules:
    if: $TF_ENABLED == null || $TF_ENABLED == '' || $TF_ENABLED == 'false'
    when: never

.terraform_cache:
  cache:
    key: '${TF_ROOT}'
    paths:
      - ${TF_ROOT}/.terraform/

.terraform_base:
  extends:
    - .terraform_image
    - .terraform_cache
    - .autodevops_retry

.terraform:fmt:
  extends:
    - .terraform_base
  stage: validate
  script:
    - gitlab-terraform fmt
  allow_failure: true
  rules:
    - !reference [.auto-devops:rules:skip_if_terraform_disabled, rules]
    - when: on_success
  variables:
    TF_ROOT: ${TF_PROJECT_DIR}

.terraform:validate:
  extends:
    - .terraform_base
  stage: validate
  script:
    - gitlab-terraform validate

.terraform:plan:
  extends:
    - .terraform_base
  stage: build
  script:
    - gitlab-terraform plan
    - gitlab-terraform plan-json
  resource_group: ${TF_STATE_NAME}
  artifacts:
    # The next line, which disables public access to pipeline artifacts, may not be available everywhere.
    # See: https://docs.gitlab.com/ee/ci/yaml/#artifactspublic
    public: false
    paths:
      - ${TF_ROOT}/plan.cache
    reports:
      terraform: ${TF_ROOT}/plan.json

.terraform:apply:
  extends:
    - .terraform_base
  stage: deploy
  script:
    - gitlab-terraform apply
  resource_group: ${TF_STATE_NAME}

.terraform:destroy:
  extends:
    - .terraform_base
  stage: cleanup
  script:
    - gitlab-terraform destroy
  resource_group: ${TF_STATE_NAME}
  when: manual
  rules:
    - !reference [.auto-devops:rules:skip_if_terraform_disabled, rules]
    - !reference [.auto-devops:rules:skip_if_staging_disabled, rules]
    - when: on_success

terraform:fmt:
  extends: .terraform:fmt
  needs: []

terraform:validate:staging:
  extends: .terraform:validate
  needs: []
  variables:
    TF_STATE_NAME: staging
  rules:
    - !reference [.auto-devops:rules:skip_if_terraform_disabled, rules]
    - !reference [.auto-devops:rules:skip_if_staging_disabled, rules]
    - when: on_success

terraform:plan:staging:
  extends:
    - .terraform:plan
  environment:
    name: staging
    action: prepare
  variables:
    TF_STATE_NAME: staging
  needs:
    - job: terraform:validate:staging
      artifacts: true
  rules:
    - !reference [.auto-devops:rules:skip_if_terraform_disabled, rules]
    - !reference [.auto-devops:rules:skip_if_staging_disabled, rules]
    - when: on_success

terraform:apply:staging:
  extends:
    - .terraform:apply
  stage: staging
  environment:
    name: staging
    action: start
  variables:
    TF_STATE_NAME: staging
    TF_AUTO_DEPLOY: 'true'
  rules:
    - !reference [.auto-devops:rules:skip_if_terraform_disabled, rules]
    - !reference [.auto-devops:rules:skip_if_staging_disabled, rules]
    - !reference [.auto-devops:rules:skip_non_default_branch, rules]
    - if: $TF_AUTO_DEPLOY == "true"
    - when: manual

terraform:validate:production:
  extends: .terraform:validate
  needs: []
  variables:
    TF_STATE_NAME: production
  rules:
    - !reference [.auto-devops:rules:skip_if_terraform_disabled, rules]
    - when: on_success

terraform:plan:production:
  extends: .terraform:plan
  environment:
    name: production
    action: prepare
  needs:
    - job: terraform:validate:production
      artifacts: true
  variables:
    TF_STATE_NAME: production
  rules:
    - !reference [.auto-devops:rules:skip_if_terraform_disabled, rules]
    - when: on_success

terraform:apply:production:
  extends: .terraform:apply
  stage: production
  environment:
    name: production
    action: start
  variables:
    TF_STATE_NAME: production
  rules:
    - !reference [.auto-devops:rules:skip_if_terraform_disabled, rules]
    - !reference [.auto-devops:rules:skip_non_default_branch, rules]
    - if: $TF_AUTO_DEPLOY == "true"
    - when: manual
