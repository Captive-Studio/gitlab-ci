# @see https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Terraform/Base.gitlab-ci.yml
# @see https://docs.gitlab.com/ee/user/infrastructure/iac/terraform_template_recipes.html

# include:
# Add security scan
# - template: Jobs/SAST-IaC.gitlab-ci.yml
# rules:
#   - if: $TF_ENABLED != null && $TF_ENABLED != '' & $TF_ENABLED != 'false'

.auto-devops:rules:skip_if_terraform_disabled:
  rules:
    if: $TF_ENABLED == null || $TF_ENABLED == '' || $TF_ENABLED == 'false'
    when: never

.autodevops:script:env-terraform:
  script:
    # @see https://gitlab.com/gitlab-org/terraform-images/-/blob/master/src/bin/gitlab-terraform.sh
    - |
      # ðŸ”§[Terraform] Configure terraform
      if [ -n "${TF_ROOT}" ]; then
        abs_tf_root=$(cd "${CI_PROJECT_DIR}"; realpath "${TF_ROOT}")

        TF_CHDIR_OPT="-chdir=${abs_tf_root}"

        default_tf_plan_cache="${abs_tf_root}/plan.cache"
        default_tf_plan_json="${abs_tf_root}/plan.json"
      fi

      if [ -z "${TF_PLAN_CACHE}" ]; then
        TF_PLAN_CACHE="${default_tf_plan_cache:-plan.cache}"
      fi

      # If TF_PLAN_JSON is not set then use either the plan.json file within TF_ROOT if set, or plan.json in CWD
      if [ -z "${TF_PLAN_JSON}" ]; then
        TF_PLAN_JSON="${default_tf_plan_json:-plan.json}"
      fi

      # Set variables for the HTTP backend to default to TF_* values
      export TF_HTTP_ADDRESS="${TF_HTTP_ADDRESS:-${TF_ADDRESS}}"
      export TF_HTTP_LOCK_ADDRESS="${TF_HTTP_LOCK_ADDRESS:-${TF_ADDRESS}/lock}"
      export TF_HTTP_LOCK_METHOD="${TF_HTTP_LOCK_METHOD:-POST}"
      export TF_HTTP_UNLOCK_ADDRESS="${TF_HTTP_UNLOCK_ADDRESS:-${TF_ADDRESS}/lock}"
      export TF_HTTP_UNLOCK_METHOD="${TF_HTTP_UNLOCK_METHOD:-DELETE}"
      export TF_HTTP_USERNAME="${TF_HTTP_USERNAME:-${TF_USERNAME}}"
      export TF_HTTP_PASSWORD="${TF_HTTP_PASSWORD:-${TF_PASSWORD}}"
      export TF_HTTP_RETRY_WAIT_MIN="${TF_HTTP_RETRY_WAIT_MIN:-5}"

      # Expose Gitlab specific variables to terraform since no -tf-var is available
      # Usable in the .tf file as variable "CI_JOB_ID" { type = string } etc
      export TF_VAR_CI_JOB_ID="${TF_VAR_CI_JOB_ID:-${CI_JOB_ID}}"
      export TF_VAR_CI_COMMIT_SHA="${TF_VAR_CI_COMMIT_SHA:-${CI_COMMIT_SHA}}"
      export TF_VAR_CI_JOB_STAGE="${TF_VAR_CI_JOB_STAGE:-${CI_JOB_STAGE}}"
      export TF_VAR_CI_PROJECT_ID="${TF_VAR_CI_PROJECT_ID:-${CI_PROJECT_ID}}"
      export TF_VAR_CI_PROJECT_NAME="${TF_VAR_CI_PROJECT_NAME:-${CI_PROJECT_NAME}}"
      export TF_VAR_CI_PROJECT_NAMESPACE="${TF_VAR_CI_PROJECT_NAMESPACE:-${CI_PROJECT_NAMESPACE}}"
      export TF_VAR_CI_PROJECT_PATH="${TF_VAR_CI_PROJECT_PATH:-${CI_PROJECT_PATH}}"
      export TF_VAR_CI_PROJECT_URL="${TF_VAR_CI_PROJECT_URL:-${CI_PROJECT_URL}}"

      # Use terraform automation mode (will remove some verbose unneeded messages)
      export TF_IN_AUTOMATION=true

      DEFAULT_TF_CONFIG_PATH="$HOME/.terraformrc"

      # Set a Terraform CLI Configuration File
      if [ -z "${TF_CLI_CONFIG_FILE}" ] && [ -f "${DEFAULT_TF_CONFIG_PATH}" ]; then
        export TF_CLI_CONFIG_FILE="${DEFAULT_TF_CONFIG_PATH}"
      fi

      # If TF_IMPLICIT_INIT is not set, we set it to `true`.
      # If set to `true` it will call `terraform init` prior
      # to calling the wrapper `terraform` commands.
      TF_IMPLICIT_INIT=${TF_IMPLICIT_INIT:-true}

.autodevops:script:terraform-init:
  script:
    - terraform "${TF_CHDIR_OPT}" init -input=false ${TF_INIT_FLAGS}

.terraform_cache:
  cache:
    key: '${TF_ROOT}'
    paths:
      - ${TF_ROOT}/.terraform/

# Mixin to use Terraform
#
# @example
#
# my_step:
#   extends
#     - .terraform_image
.terraform_image:
  image:
    name: hashicorp/terraform:${TF_VERSION}
    entrypoint:
      - /usr/bin/env
      - 'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'

.terraform_base:
  extends:
    - .terraform_image
    - .terraform_cache
    - .autodevops_retry
  before_script:
    - !reference [.autodevops:script:before, script]
    - !reference [.autodevops:script:env-terraform, script]
    - !reference [.autodevops:script:terraform-init, script]

.terraform:fmt:
  extends:
    - .terraform_base
  stage: validate
  script:
    - terraform "${TF_CHDIR_OPT}" fmt -check -diff -recursive
  allow_failure: true
  rules:
    - !reference [.auto-devops:rules:skip_if_terraform_disabled, rules]
    - when: on_success
  variables:
    TF_ROOT: ${TF_PROJECT_DIR}

.terraform:validate:
  extends:
    - .terraform_base
  stage: validate
  script:
    - terraform "${TF_CHDIR_OPT}" validate

.terraform:plan:
  extends:
    - .terraform_base
  stage: build
  script:
    - terraform "${TF_CHDIR_OPT}" plan -input=false -out="${TF_PLAN_CACHE}"
    # TODO: backport report generation
    # - terraform "${TF_CHDIR_OPT}" show -json "${TF_PLAN_CACHE}" | jq -r "${JQ_PLAN}" > "${TF_PLAN_JSON}"

    # - gitlab-terraform plan-json
  resource_group: ${TF_STATE_NAME}
  artifacts:
    # The next line, which disables public access to pipeline artifacts, may not be available everywhere.
    # See: https://docs.gitlab.com/ee/ci/yaml/#artifactspublic
    public: false
    paths:
      - ${TF_ROOT}/plan.cache

    # TODO: make this work !
    # reports:
    #   terraform: ${TF_ROOT}/plan.json

.terraform:apply:
  extends:
    - .terraform_base
  stage: deploy
  script:
    - terraform "${TF_CHDIR_OPT}" apply -input=false "${TF_PLAN_CACHE}"
  resource_group: ${TF_STATE_NAME}

.terraform:destroy:
  extends:
    - .terraform_base
  stage: cleanup
  script:
    - terraform "${TF_CHDIR_OPT}" destroy -auto-approve
  resource_group: ${TF_STATE_NAME}
  when: manual
  rules:
    - !reference [.auto-devops:rules:skip_if_terraform_disabled, rules]
    - !reference [.auto-devops:rules:skip_if_staging_disabled, rules]
    - when: on_success

terraform:fmt:
  extends: .terraform:fmt
  needs: []

terraform:validate:staging:
  extends: .terraform:validate
  needs: []
  variables:
    TF_STATE_NAME: staging
  rules:
    - !reference [.auto-devops:rules:skip_if_terraform_disabled, rules]
    - !reference [.auto-devops:rules:skip_if_staging_disabled, rules]
    - when: on_success

terraform:plan:staging:
  extends:
    - .terraform:plan
  environment:
    name: staging
    action: prepare
  variables:
    TF_STATE_NAME: staging
  needs:
    - job: terraform:validate:staging
      artifacts: true
  rules:
    - !reference [.auto-devops:rules:skip_if_terraform_disabled, rules]
    - !reference [.auto-devops:rules:skip_if_staging_disabled, rules]
    - when: on_success

terraform:apply:staging:
  extends:
    - .terraform:apply
  stage: staging
  environment:
    name: staging
    action: start
  variables:
    TF_STATE_NAME: staging
    TF_AUTO_DEPLOY: 'true'
  rules:
    - !reference [.auto-devops:rules:skip_if_terraform_disabled, rules]
    - !reference [.auto-devops:rules:skip_if_staging_disabled, rules]
    - !reference [.auto-devops:rules:skip_non_default_branch, rules]
    - if: $TF_AUTO_DEPLOY == "true"
    - when: manual

terraform:validate:production:
  extends: .terraform:validate
  needs: []
  variables:
    TF_STATE_NAME: production
  rules:
    - !reference [.auto-devops:rules:skip_if_terraform_disabled, rules]
    - when: on_success

terraform:plan:production:
  extends: .terraform:plan
  environment:
    name: production
    action: prepare
  needs:
    - job: terraform:validate:production
      artifacts: true
  variables:
    TF_STATE_NAME: production
  rules:
    - !reference [.auto-devops:rules:skip_if_terraform_disabled, rules]
    - when: on_success

terraform:apply:production:
  extends: .terraform:apply
  stage: production
  environment:
    name: production
    action: start
  variables:
    TF_STATE_NAME: production
  rules:
    - !reference [.auto-devops:rules:skip_if_terraform_disabled, rules]
    - !reference [.auto-devops:rules:skip_non_default_branch, rules]
    - if: $TF_AUTO_DEPLOY == "true"
    - when: manual
