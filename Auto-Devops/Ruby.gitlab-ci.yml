# @see https://gitlab.com/gitlab-org/gitlab-foss/-/blob/master/lib/gitlab/ci/templates/Ruby.gitlab-ci.yml

.auto-devops:rules:skip_if_ruby_disabled:
  rules:
    - if: $RUBY_ENABLED == null || $RUBY_ENABLED == '' || $RUBY_ENABLED == 'false'
      when: never

.auto-devops:rules:only_rubocop_conf:
  rules:
    - exists:
        - .rubocop.yml

.auto-devops:rules:only_gemfile:
  rules:
    - exists:
        - Gemfile

.auto-devops:rules:only_rakefile:
  rules:
    - exists:
        - Rakefile

.auto-devops:rules:only_rubycritic:
  rules:
    - exists:
        - .rubycritic.yml

variables:
  # TODO: Enable this to optimize on shared runner cache
  # => BUT there is conflict between BUNDLE_CACHE_PATH and BUNDLE_FROZEN, bundle install returns an error
  # BUNDLE_CACHE_PATH: $CI_BUNDLE_CACHE_PATH
  BUNDLE_PATH: vendor/bundle
  BUNDLE_FROZEN: 'true'
  DISABLE_SPRING: 'true'
  RAKE_TASK_BUILD: 'assets:precompile'
  # Default is rspec
  RAKE_TASK_TEST: spec
  RAKE_TASK_TEST_SYSTEM: 'test:system'

# FIXME: .code_quality "except" conflicts with "rules"
# except:
#   - /^backup\//

.ruby_base:
  extends:
    - .autodevops_retry
    - .ruby_image
  before_script:
    - !reference [.autodevops:script:before, script]
    - |
      # [Ruby] üîß Configure bundle default settings
      export BUNDLE_JOBS=${BUNDLE_JOBS:-$(nproc)}
      export BUNDLE_FROZEN=${BUNDLE_FROZEN:-'true'}

.rake_test:
  extends:
    - .ruby_base
    - .install_cache
  stage: test
  services:
    - postgres:latest@sha256:6b841c8f6a819884207402f1209a8116844365df15fca8cf556fc54a24c70800
    - redis:latest@sha256:ae02f2cf0b6568f529dd1993507c662accec1048bfe1f41f74937249f95ac8c6
  variables:
    RAILS_ENV: test
  before_script:
    - !reference [.ruby_base, before_script]
    - |
      # [Ruby] üîß Prepare database
      if [[ ! -z $(bundle exec rake --tasks 'db')  ]];then
        bundle exec rake db:create db:migrate
        bundle exec rake db:seed
      fi

ruby:install:
  extends:
    - .ruby_base
  stage: prepare
  cache:
    # - !reference [.ruby_download_cache, cache]
    - !reference [.ruby_cache_push, cache]
  script:
    # Dump environment
    - |
      # [Ruby] üîç Display the environment
      echo BUNDLE_CACHE_PATH=${BUNDLE_CACHE_PATH:-""}
      echo BUNDLE_PATH=${BUNDLE_PATH:-""}
      bundle --version
      ruby --version
    - |
      # [Ruby] ‚§µÔ∏è Ensure download cache exist
      if [ ! -z "${BUNDLE_CACHE_PATH:-""}" ];then
        mkdir -p $BUNDLE_CACHE_PATH
      fi
    # Install dependencies
    - bundle install
  rules:
    - !reference [.auto-devops:rules:skip_builder_default_disabled, rules]
    - !reference [.auto-devops:rules:skip_if_ruby_disabled, rules]
    - !reference [.auto-devops:rules:only_gemfile, rules]

ruby:bundle-rubocop:
  extends:
    - .ruby_base
    - .ruby_cache
  stage: validate
  script:
    - bundle exec rubocop
  needs:
    - job: ruby:install
      artifacts: true
  rules:
    - !reference [.auto-devops:rules:skip_builder_default_disabled, rules]
    - !reference [.auto-devops:rules:skip_if_ruby_disabled, rules]
    - !reference [.auto-devops:rules:skip_code_quality_disabled, rules]
    - !reference [.auto-devops:rules:only_rubocop_conf, rules]
    - !reference [.auto-devops:rules:only_rubycritic, rules]

ruby:rubycritic:
  extends:
    - .ruby_base
    - .ruby_cache
  stage: validate
  needs:
    - job: ruby:install
      artifacts: true
  script:
    - git fetch origin $CI_DEFAULT_BRANCH:$CI_DEFAULT_BRANCH
    # - gem install rubycritic
    - bundle exec rubycritic --no-browser --mode-ci
  rules:
    - !reference [.auto-devops:rules:skip_builder_default_disabled, rules]
    - !reference [.auto-devops:rules:skip_if_ruby_disabled, rules]
    - !reference [.auto-devops:rules:skip_code_quality_disabled, rules]
    - !reference [.auto-devops:rules:only_rubycritic, rules]

ruby:rake:build:
  extends:
    - .ruby_base
    - .install_cache
  stage: build
  script:
    - SUPPRESS_JASMINE_DEPRECATION="true"
    - bundle exec rake "${RAKE_TASK_BUILD}"
  artifacts:
    paths:
      - public/assets
    expire_in: 1 day
    when: always
  needs:
    - job: ruby:install
      artifacts: true
    - job: nodejs:install
      artifacts: true
      optional: true
  rules:
    - !reference [.auto-devops:rules:skip_builder_default_disabled, rules]
    - !reference [.auto-devops:rules:skip_if_ruby_disabled, rules]
    - !reference [.auto-devops:rules:skip_build_disabled, rules]
    - !reference [.auto-devops:rules:only_rakefile, rules]

ruby:rake:test:
  extends:
    - .rake_test
  script:
    - bundle exec rake ${RAKE_TASK_TEST}
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage/coverage.xml
  rules:
    - !reference [.auto-devops:rules:skip_builder_default_disabled, rules]
    - !reference [.auto-devops:rules:skip_if_ruby_disabled, rules]
    - !reference [.auto-devops:rules:skip_test_disabled, rules]
    - !reference [.auto-devops:rules:only_rakefile, rules]

ruby:rake:test-system:
  extends:
    - .rake_test
    - .ruby_image_browsers
  script:
    - bundle exec rake ${RAKE_TASK_TEST_SYSTEM}
  rules:
    - !reference [.auto-devops:rules:skip_builder_default_disabled, rules]
    - !reference [.auto-devops:rules:skip_if_ruby_disabled, rules]
    - !reference [.auto-devops:rules:skip_test_system_disabled, rules]
    - !reference [.auto-devops:rules:only_rakefile, rules]
