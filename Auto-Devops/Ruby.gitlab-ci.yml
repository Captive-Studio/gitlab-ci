# @see https://gitlab.com/gitlab-org/gitlab-foss/-/blob/master/lib/gitlab/ci/templates/Ruby.gitlab-ci.yml

.ruby_rules:
  rules:
    - &skip_build_disabled
      if: $BUILD_ENABLED == null || $BUILD_ENABLED == ''
      when: never
    - &skip_code_quality_disabled
      if: $CODE_QUALITY_ENABLED == null || $CODE_QUALITY_ENABLED == ''
      when: never
    - &skip_test_disabled
      if: $TEST_ENABLED == null || $TEST_ENABLED == ''
      when: never
    - &skip_test_system_disabled
      if: $TEST_SYSTEM_ENABLED == null || $TEST_SYSTEM_ENABLED == ''
      when: never
    - &skip_if_makefile
      exists:
        - Makefile
      when: never
    - &skip_non_default_branch
      if: $CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH
      when: never
    - &only_rubocop_conf
      exists:
        - .rubocop.yml
    - &only_rakefile
      exists:
        - Rakefile
    - &only_gemfile
      exists:
        - Gemfile

.ruby_cache:
  cache:
    - &ruby_cache
      key:
        files:
          - Gemfile.lock
      paths:
        - ${BUNDLE_PATH}
      policy: pull
    - &nodejs_cache
      key: ${CI_PIPELINE_ID}-node-install
      paths:
        - ${CI_CYPRESS_CACHE_FOLDER}
        - '**/node_modules/'
      policy: pull

variables:
  BUNDLE_PATH: vendor/bundle
  BUNDLE_JOBS: $(nproc)
  BUNDLE_FROZEN: 'true'
  DISABLE_SPRING: 'true'

# FIXME: .code_quality "except" conflicts with "rules"
# except:
#   - /^backup\//

ruby:check-tools:
  extends:
    - .code_quality
  script:
    - controle-qualite.mk self-check-ruby
  rules:
    - <<: *only_gemfile
  allow_failure: true

ruby:bundle-audit:
  extends:
    - .code_quality
  script:
    - controle-qualite.mk bundle-audit
  rules:
    - <<: *skip_non_default_branch
    - <<: *only_gemfile
  allow_failure: true

ruby:brakeman:
  extends:
    - .code_quality
  script:
    - controle-qualite.mk brakeman
  rules:
    - <<: *skip_code_quality_disabled
    - <<: *only_gemfile
  allow_failure: true

ruby:install:
  extends:
    - .ruby_image
  stage: prepare
  cache:
    - <<: *ruby_cache
      policy: pull-push
  script:
    - ruby --version # Print out ruby version for debugging
    - bundle install "${FLAGS[@]}"
  rules:
    - <<: *skip_if_makefile
    - <<: *only_gemfile

ruby:bundle-rubocop:
  extends:
    - .ruby_image
    - .ruby_cache
  stage: test
  script:
    - bundle exec rubocop
  rules:
    - <<: *skip_code_quality_disabled
    - <<: *skip_if_makefile
    - <<: *only_rubocop_conf

.rake_test:
  extends:
    - .ruby_image
    - .ruby_cache
  stage: test
  services:
    - postgres:latest
    - redis:latest
  variables:
    RAILS_ENV: test
  before_script:
    - |
      if [[ ! -z $(bundle exec rake --tasks 'db')  ]];then
        bundle exec rake db:create db:migrate
        bundle exec rake db:seed
      fi

ruby:rake:test:
  extends:
    - .rake_test
  script:
    - |
      RAKE_TEST_FOUND=0
      if [[ ! -z $(bundle exec rake --tasks '^test$')  ]];then
        RAKE_TEST_FOUND=1
        bundle exec rake test
      fi
      if [[ ! -z $(bundle exec rake --tasks '^spec$')  ]];then
        RAKE_TEST_FOUND=1
        bundle exec rake spec
      fi
      if [[ "$RAKE_TEST_FOUND" == "0" ]];then
        echo 'Warning: No rake test command found'
      fi
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage/coverage.xml
  rules:
    - <<: *skip_test_disabled
    - <<: *skip_if_makefile
    - <<: *only_rakefile

ruby:rake:test-system:
  extends:
    - .rake_test
    - .ruby_image_browsers
  script:
    - |
      RAKE_TEST_FOUND=0
      if [[ ! -z $(bundle exec rake --tasks '^test:system$')  ]];then
        RAKE_TEST_FOUND=1
        bundle exec rake test:system
      fi
      if [[ "$RAKE_TEST_FOUND" == "0" ]];then
        echo 'Warning: No rake test:system command found'
      fi
  rules:
    - <<: *skip_test_system_disabled
    - <<: *skip_if_makefile
    - <<: *only_rakefile
