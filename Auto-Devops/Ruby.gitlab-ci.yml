# @see https://gitlab.com/gitlab-org/gitlab-foss/-/blob/master/lib/gitlab/ci/templates/Ruby.gitlab-ci.yml

.ruby_rules:
  rules:
    - &skip_test_disabled
      if: $TEST_ENABLED == null || $TEST_ENABLED == '' || $TEST_ENABLED == 'false'
      when: never
    - &skip_test_system_disabled
      if: $TEST_SYSTEM_ENABLED == null || $TEST_SYSTEM_ENABLED == '' || $TEST_SYSTEM_ENABLED == 'false'
      when: never
    - &skip_if_makefile
      exists:
        - Makefile
      when: never
    - &skip_if_ruby_disabled
      if: $RUBY_ENABLED == null || $RUBY_ENABLED == '' || $RUBY_ENABLED == 'false'
      when: never
    - &only_rubocop_conf
      exists:
        - .rubocop.yml
    - &only_rakefile
      exists:
        - Rakefile
    - &only_gemfile
      exists:
        - Gemfile

variables:
  # TODO: Enable this to optimize on shared runner cache
  # => BUT there is conflict between BUNDLE_CACHE_PATH and BUNDLE_FROZEN, bundle install returns an error
  # BUNDLE_CACHE_PATH: $CI_BUNDLE_CACHE_PATH
  BUNDLE_PATH: vendor/bundle
  BUNDLE_JOBS: $(nproc)
  BUNDLE_FROZEN: 'true'
  DISABLE_SPRING: 'true'

# FIXME: .code_quality "except" conflicts with "rules"
# except:
#   - /^backup\//

ruby:install:
  extends:
    - .ruby_image
  stage: prepare
  cache:
    # - !reference [.ruby_download_cache, cache]
    - !reference [.ruby_cache_push, cache]
  script:
    # Dump environment
    - |
      # Display the environment
      echo BUNDLE_CACHE_PATH=$BUNDLE_CACHE_PATH
      echo BUNDLE_PATH=$BUNDLE_PATH
      bundle --version
      ruby --version
    - |
      # Ensure download cache exist
      if [ ! -z "$BUNDLE_CACHE_PATH" ];then
        mkdir -p $BUNDLE_CACHE_PATH
      fi
    # Install dependencies
    - bundle install
  rules:
    - <<: *skip_if_makefile
    - <<: *skip_if_ruby_disabled
    - <<: *only_gemfile

ruby:bundle-rubocop:
  extends:
    - .ruby_image
    - .ruby_cache
  stage: validate
  script:
    - bundle exec rubocop
  needs:
    - job: ruby:install
      artifacts: true
  rules:
    - !reference [.auto-devops:rules:skip_code_quality_disabled, rules]
    - <<: *skip_if_makefile
    - <<: *skip_if_ruby_disabled
    - <<: *only_rubocop_conf

.rake_test:
  extends:
    - .ruby_image
    - .install_cache
  stage: test
  services:
    - postgres:latest
    - redis:latest
  variables:
    RAILS_ENV: test
  before_script:
    - |
      if [[ ! -z $(bundle exec rake --tasks 'db')  ]];then
        bundle exec rake db:create db:migrate
        bundle exec rake db:seed
      fi

ruby:rake:build:
  extends:
    - .ruby_image
    - .install_cache
  stage: build
  script:
    - |
      # bundle exec rake assets:precompile
      SUPPRESS_JASMINE_DEPRECATION="true"
      if [[ ! -z $(bundle exec rake --tasks 'assets:precompile')  ]];then
        bundle exec rake assets:precompile
      fi
  artifacts:
    paths:
      - public/assets
    expire_in: 1 day
    when: always
  needs:
    - job: ruby:install
      artifacts: true
    - job: nodejs:install
      artifacts: true
      optional: true
  rules:
    - !reference [.auto-devops:rules:skip_build_disabled, rules]
    - <<: *skip_if_makefile
    - <<: *skip_if_ruby_disabled
    - <<: *only_rakefile

ruby:rake:test:
  extends:
    - .rake_test
  script:
    - |
      RAKE_TEST_FOUND=0
      if [[ ! -z $(bundle exec rake --tasks '^test$')  ]];then
        RAKE_TEST_FOUND=1
        bundle exec rake test
      fi
      if [[ ! -z $(bundle exec rake --tasks '^spec$')  ]];then
        RAKE_TEST_FOUND=1
        bundle exec rake spec
      fi
      if [[ "$RAKE_TEST_FOUND" == "0" ]];then
        echo 'Warning: No rake test command found'
      fi
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage/coverage.xml
  rules:
    - <<: *skip_test_disabled
    - <<: *skip_if_makefile
    - <<: *skip_if_ruby_disabled
    - <<: *only_rakefile

ruby:rake:test-system:
  extends:
    - .rake_test
    - .ruby_image_browsers
  script:
    - |
      RAKE_TEST_FOUND=0
      if [[ ! -z $(bundle exec rake --tasks '^test:system$')  ]];then
        RAKE_TEST_FOUND=1
        bundle exec rake test:system
      fi
      if [[ "$RAKE_TEST_FOUND" == "0" ]];then
        echo 'Warning: No rake test:system command found'
      fi
  rules:
    - <<: *skip_test_system_disabled
    - <<: *skip_if_makefile
    - <<: *skip_if_ruby_disabled
    - <<: *only_rakefile
