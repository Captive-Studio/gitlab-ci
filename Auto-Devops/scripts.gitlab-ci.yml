# Default settings
default:
  before_script:
    - !reference [.autodevops:script:before, script]

# Default script to add
#
# Usage :
# .job
#   script:
#     - !reference [.autodevops:script:before, script]
#
.autodevops:script:before:
  script:
    - !reference [.autodevops:script:shell-strict, script]
    - !reference [.autodevops:script:env-tool-versions, script]
    - !reference [.autodevops:script:env-docker, script]

# Configure shell to be strict
.autodevops:script:shell-strict:
  script:
    - |
      # [Shell] üö¶ Configure Shell as strict (if $CI_SHELL_STRICT, i.e. set -euo pipefail)
      if [[ -z "$CI_SHELL_STRICT" ]]; then
        set -euo pipefail
      fi

# Load environment variables from .tool-versions
# If a variable is already set, it is not overridden
.autodevops:script:env-tool-versions:
  script:
    - |
      # [Shell] üõ†Ô∏è Set environment variables from .tool-versions
      if [[ -f .tool-versions ]];then
        while read line
        do
          # Convert to var name and var value
          TOOL_NAME=$(echo $line | awk '{print $1}')
          TOOL_VERSION=$(echo $line | awk '{print $2}')
          TOOL_NAME_VAR=$(echo $TOOL_NAME | tr '[:lower:]' '[:upper:]')"_VERSION"

          # Read default value
          eval "export $TOOL_NAME_VAR=\${$TOOL_NAME_VAR:-$TOOL_VERSION}"
        done < .tool-versions
      fi

# Configure Docker environment variables
.autodevops:script:env-docker:
  script:
    - |
      # [Docker] üîß Export default DOCKER_* and CONTAINER_* variables
      export DOCKER_BUILDKIT=${DOCKER_BUILDKIT:-1}

      # CI images
      export CONTAINER_CI_IMAGE=${CONTAINER_CI_IMAGE:-${CI_REGISTRY_IMAGE:-""}/dev}
      export CONTAINER_CI_TAG=${CONTAINER_CI_TAG:-ci-$CI_COMMIT_REF_SLUG-$CI_COMMIT_SHORT_SHA}
      export CONTAINER_CI_TARGET=${CONTAINER_CI_TARGET:-builder}

      # Release candidate image
      export CONTAINER_RC_IMAGE=${CONTAINER_RC_IMAGE:-$CONTAINER_CI_IMAGE}
      export CONTAINER_RC_TAG=${CONTAINER_RC_TAG:-rc-$CI_COMMIT_REF_SLUG-$CI_COMMIT_SHORT_SHA}
      export CONTAINER_RC_TARGET=${CONTAINER_RC_TARGET:-runner}

      # Release image
      export CONTAINER_RELEASE_IMAGE=${CONTAINER_RELEASE_IMAGE:-${CI_REGISTRY_IMAGE:-""}}
      export CONTAINER_RELEASE_TAG=${CONTAINER_RELEASE_TAG:-1.$(echo ${CI_PIPELINE_CREATED_AT:0:19} | sed 's/[:-]//g;s/T/./g')-sha.$CI_COMMIT_SHORT_SHA}

# Checkout branch
#
# Force checkout branch
# FIXME: this is only used by "legacy" makefiles
# Makefile should use predefined variables
.autodevops:script:git-checkout-branch:
  script:
    - |
      # [Git] git checkout -B "$CI_COMMIT_REF_NAME" (if $GIT_CHECKOUT_REF_NAME)
      if [[ ! -z "$GIT_CHECKOUT_REF_NAME" ]];then
        git checkout -B "$CI_COMMIT_REF_NAME"
      fi

# Login local gitlab container registry
.autodevops:script:ci-registry-login:
  script:
    - |
      # [Docker] üîë Docker login to $CI_REGISTRY (login: $CI_REGISTRY_USER, password: $CI_REGISTRY_PASSWORD)
      unset HISTFILE
      echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
